<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | ROODAY]]></title>
  <link href="http://ROODAY.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://ROODAY.com/blog/"/>
  <updated>2014-10-08T15:09:38-04:00</updated>
  <id>http://ROODAY.com/blog/</id>
  <author>
    <name><![CDATA[Rudhra Raveendran]]></name>
    <email><![CDATA[rudytheninja@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LexHack: A Cautionary Tale of Ambition]]></title>
    <link href="http://ROODAY.com/blog/lexhack-a-cautionary-tale-of-ambition"/>
    <updated>2014-10-05T22:09:15-04:00</updated>
    <id>http://ROODAY.com/blog/lexhack-a-cautionary-tale-of-ambition</id>
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;Hackathons. Making the best program/application that you possibly can in a short span of time. Sounds like a perfect way to spend a day, doesn&rsquo;t it? In all honesty, hackathons are quite fun, especially if you know what you&rsquo;re doing, but even just to see the cool things that other people create. On Saturday, September 27th, was the first LexHack, a hackathon hosted at Lexington High School for programmers of all levels. Coincidentally, it was also my first hackathon experience.</p>

<!--more-->


<p><a href="http://i.imgur.com/kbRUDxJ.jpg"><img src="http://i.imgur.com/kbRUDxJ.jpg" alt="LexHack" width="400px" height="400px"></a></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Before heading into the event, I made a group with some friends of mine, called <a href="https://github.com/WWPOL">WWPOL</a>, as going solo would be an unnecessarily hard challenge for my first time. We had already worked together on a project for the JS13k competition the previous month, called <a href="https://github.com/WWPOL/Earth-Invader">Earth Invader</a>. (We placed 88th out of 129, but we&rsquo;re still proud of the game itself) Once we figured out which of us were able to attend LexHack, we set out on thinking of an idea so that we wouldn&rsquo;t enter unprepared.</p>

<p><a href="https://raw.githubusercontent.com/WWPOL/Earth-Invader/gh-pages/screenshots/3.png"><img src="https://raw.githubusercontent.com/WWPOL/Earth-Invader/gh-pages/screenshots/3.png" alt="Earth Invader" width="640px" height="360px"></a></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;We quickly settled on the idea of making a turn based, online, two player battleship game using <a href="http://phaser.io/">Phaser.js</a> and <a href="http://socket.io/">Socket.io</a>, called <a href="https://github.com/WWPOL/RTShips">RTShips</a>. At first, it seemed like a great idea. We&rsquo;d use Phaser to do all the rendering and dealing with sprites, which would free up our time to worry with the more important things like synchronization and game logic. And for synchronization, we&rsquo;d be able to use Socket.io to deal with sending turn data to each player, so we&rsquo;d really only have to spend time on the game itself. Or so we thought.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;As the day drew nearer, we began thinking of more and more features that we could add that would make the game look more impressive, such as a fog of war style UI, inspired by the Civilization games, and a targetting overlay for battleships to use when firing. Although we eventually got around to dealing with implementation, we had done too much what, and not enough how. The night before, we made our final checks on the idea, and I drew up sprites, as textures were allowed to be made beforehand. (And <a href="https://github.com/WWPOL/RTShips/tree/master/public/assets/ships">they</a> weren&rsquo;t too bad, if I do say so myself) After that, all we could do was wait.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;When I arrived at Lexington High School (with a fair bit of diffculty as my GPS led me to the back of the school for some odd reason), I was happily surprised at the turnout. It wasn&rsquo;t too big a group, as that would mean too much competition, but it wasn&rsquo;t so low to the point where it wouldn&rsquo;t be fun. (The actual number was pretty close to 80) The only issue was that our group was originally five people, but about a week before two of them had to cancel, leaving us shorthanded. Othat than that note, nothing really interesting happened in the registration/preparation period, other than a member of my team bringing munchkins. Thanks Phil! At about 9:30 in the morning, the hacking began, and WWPOL furiously set to work.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Initially, RTShips was going pretty swell. We quickly got some sprites up on the screen, and within the hour we had implemented a large map that a player could scroll around. After a couple hours or so we had the ability to move sprites by clicking on them, then clicking on a tile for them to move to. But, at about 4-5 hours, the troubles began.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Firstly, we had trouble moving more than one ship. Any good turn based strategy game would allow the manipulation of more than one unit, correct? Well, RTShips was lacking in that aspect. The game had an issue where after you clicked one ship, you could no longer select another ship. Clicking anywhere else around the board would just move the original ship. Not so good&hellip; Many more minor problems ensued, namely features like scrolling or clicking certain buttons breaking, but the biggest issue occured at about half way through the hackathon, where we had an entirely game breaking error that was connected to a fundamental part of the game: sending data to the other player.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Socket.io was designed for small packets of data, like strings of text for a <a href="https://github.com/philsiff/ChatAnon">chatroom</a>, for example. One thing we didn&rsquo;t realize going in, as we honestly didn&rsquo;t have enough experience with Phaser.js, was that Phaser&rsquo;s sprites were really, <em>really</em> large objects, with many different properties. Trying to send even one Phaser sprite through a socket hook would break socket, and this issue stalled our progress for a solid thirty minutes. In the end, we didn&rsquo;t ever get past the issue, as we ditched RTShips, and all three of us split off into making separate projects. One used the RTShips sprites to make a whack-a-mole-esque game which used socket multiplayer, another attempted to continue working on the game without Phaser, and I tried to make a two player pong using socket.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Fast forward another 5 or so hours, and there&rsquo;s barely any progress, except for the whack-a-mole game. During one of our deep, reflective breaks, we realized that we had endured the five stages of grief during our failed development of RTShips, and we all laughed it off and basically said &ldquo;Screw it!&rdquo; With all the time we lost, we just accepted the fact and tried to enjoy the rest of the day. (Which we did) Because of this, we did more travelling to other groups to see their projects than work on our own, and ended up submitting Whack-a-Ship, as the original game couldn&rsquo;t be salvaged, and Pong was uncomplete due to syncing errors. (But <a href="https://github.com/ROODAY/Jong">here&rsquo;s</a> its spiritual successor, with 4 players)</p>

<p><a href="http://i.imgur.com/4dpKk6A.png"><img src="http://i.imgur.com/4dpKk6A.png" alt="Jong" width="640px" height="360px"></a></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;We didn&rsquo;t win anything of course, due to the huge mistakes that were made, and not to mention the insanely good projects that were submitted, the first place one being an etch-a-sketch built off an arduino that saved the sketches to a .stl file that could be 3D printed. (Mind = Blown) But despite that, we did learn a lesson from LexHack: <strong>Don&rsquo;t Get Too Ambitious!</strong> The biggest problem with RTShips was that we expected to do so much more than was actually possible in 12 hours. It was our first hackathon, none of us really knew how to use Phaser.js or Socket.io very well, and we were two men short. Had we chosen a simpler project and commited to it, even something as simple as Pong, we might&rsquo;ve placed! Ambition is a good thing to have, but overestimating your skill will most likely end with a pretty bad result. It may not be as bad as Whack-a-Ship, but still, pretty bad.</p>

<p><a href="http://i.imgur.com/IX6Zapx.png"><img src="http://i.imgur.com/IX6Zapx.png" alt="The Almighty Whack A Ship" width="640px" height="360px"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Take Your Time.]]></title>
    <link href="http://ROODAY.com/blog/take-your-time"/>
    <updated>2014-10-04T21:38:56-04:00</updated>
    <id>http://ROODAY.com/blog/take-your-time</id>
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;Yesterday, whilst browsing my usual slew of subreddits, I happened upon probably the best octopus related, github compatible, static blogging framework: Octopress. In my excited frenzy to whip together something that I could call a blog, no matter the quality, I failed to notice some very key details in my process.</p>

<!--more-->


<p>&nbsp;&nbsp;&nbsp;&nbsp;The first step in setting up an Octopress blog, according to the framework&rsquo;s website, is to clone Octopress, and run the commands like <code>bundle install</code>, <code>rake install</code>, and <code>rake setup_github_pages</code>. All well and good, and what do you know, I have a blog up and running!</p>

<p><a href="http://i.imgur.com/9yxAMwX.png"><img src="http://i.imgur.com/9yxAMwX.png" alt="A Default Octopress Blog" width="640px" height="360px"></a></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Not bad, and it only took about 5 minutes! But such a short time led me to make mistake after mistake, as I foolishly believed that every step and every customization would happen in the same timeframe. In retrospect, it really did take very little time to make changes, but I was just being stupid. You see, Octopress has three folders that contain files relating to your blog. Firstly, there is the source folder. <em>That</em> is where you would make your changes, and honestly, it would seem pretty intuitive. Then, there is the public folder, which in turn contains another folder, by default called github, which contained the compiled version of the source folder. And finally, there is the deploy folder, which is basically the public folder, but with a .git folder to sync with github pages.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;However, when I saw <a href="https://github.com/sevenadrian/MediumFox">MediumFox</a>, the beautiful theme by Adrian Artiles that this blog is currently using, I pounced on the installing themes link like a starving cheetah would a gazelle. But with a lot less blood and dying gazelle noises. Ok it honestly was more like clicking on a link, but it sure felt like I was devouring a gazelle. Anyways, after adding MediumFox as a git submodule and installing, I quickly deployed to my blog&rsquo;s github repo (which is a project repo, this is a fairly big detail) and marveled in my now responsive blog. But the 300.00 milliseconds of marveling was cut short by a few eyesores, namely the missing images that abounded throughout the site.</p>

<p><a href="http://i.imgur.com/MiTa57P.png"><img src="http://i.imgur.com/MiTa57P.png" alt="Something's not right..." width="640px" height="360px"></a></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;To Mr. Artiles&#8217; credit, it looked pretty good despite the errors. But little folded pages are not what I wanted for my blog, no siree, and so I set out to fix such a travesty in the same rapid manner I employed while setting up Octopress. After a hasty glance at MediumFox&rsquo;s readme, I gleaned something about a folder called &ldquo;source&rdquo;. Hmm&hellip; That&rsquo;s probably the <code>.source</code> folder in the MediumFox folder! Right? Nope. But sadly that didn&rsquo;t occur to me at the time.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Regardless of which folder I entered, the error was the same: MediumFox was referencing rooday.com/images, rather than rooday.com/blog/images. After making the necessary changes to the source files, I ran <code>rake generate</code>, but as you probably guessed, nothing changed. So, the next logical step was to run <code>rake generate</code> another 13 or so times. A bakers dozen of repeating commands may not really be logical, but it seemed to be the only way, as it couldn&rsquo;t <em>possibly</em> be <em>my</em> error. Re-reading Octopress&#8217; configuration guide (which should&rsquo;ve been the first step) revealed a root option for Jekyll to use on relative URLs. Of course, that didn&rsquo;t work either. So I emailed Mr. Artiles and called it a day. If you&rsquo;re reading this man, I&rsquo;m sorry for bothering you!</p>

<p><blockquote><p>Is there a way to change what mediumfox thinks is the root directory? My octopress blog is a project page/subdirectory of my main site, and a lot of things don&rsquo;t load as they are trying to be loaded from the root folder.</p><footer><strong>Me</strong> <cite>An Unnecessary Email</cite></footer></blockquote></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Early the next morning, I pondered on the issue. After some deep thinking and some chocolate milk, I got an idea. &ldquo;Let&rsquo;s just replace your normal site with the blog, and bypass the relative URL issue!&rdquo; So that happened, and the thing actually worked, and looked basically as it does now.</p>

<p><a href="http://i.imgur.com/DoDsMq0.jpg"><img src="http://i.imgur.com/DoDsMq0.jpg" alt="Just in case I changed the theme" width="640px" height="360px"></a></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;About an hour or so later, I became displeased with such an extreme compromise, so I put my <a href="http://rooday.com/">old site</a> back, deleted everything relating to the blog, and started from scratch. You&rsquo;d think that somewhere along all this deep thinking, I would&rsquo;ve realized that I need to go through this process slowly, and carefully look at what I needed to edit. To make a 45 minute story into a 32 word sentence, I kept editing the wrong files in the wrong folder and ended up deleting and recreating my blog repo 3 times.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;It was only after all that and another impulsive email to <a href="https://github.com/imathis">Brandon Mathis</a>, creator of Octopress, that I discovered my folly. I had been editing the wrong source folder! When MediumFox&rsquo;s readme mentioned a source folder, it meant the source folder in the blog, not the one specific to the theme. You&rsquo;re probably thinking, &ldquo;Rudy, you&rsquo;re stupid&rdquo;. And you&rsquo;d be right! At least in this case&hellip;I think&hellip; And that&rsquo;s where the title comes into play. Messing with Octopress and making a blog reminded me of a very important rule: <strong>Take your time!</strong> Had I made sure to change the right files, I would&rsquo;ve saved myself a ton of headache, and in the long run, a lot of time. Did I really have to write out a 5580 character markdown file to get this point across? No, but I sure as hell needed a first post on my blog. Thanks for sticking around! And please take this token of my appreciation:</p>

<p><a href="http://img.pandawhale.com/93002-reddit-silver-medal-meme-funny-B9d2.jpeg"><img src="http://img.pandawhale.com/93002-reddit-silver-medal-meme-funny-B9d2.jpeg" alt="Some Reddit Silver for you troubles" width="640px" height="360px"></a></p>
]]></content>
  </entry>
  
</feed>
